data <- read.csv("activity.csv")
data <- read.csv("activity.zip")
View(data)
View(data)
zipF<-file.choose("activity.zip")
outDir<-"C:\Users\netzl\OneDrive\Dokumente\Online Kurse\Data Science Spezialisierung John Hopkins\Reproducible Research\RepData_PeerAssessment1"
outDir<-"C:\Users\netzl\OneDrive\Dokumente\Online Kurse\Data Science Spezialisierung John Hopkins\Reproducible Research\RepData_PeerAssessment1"
outDir<-"C:\\Users\\netzl\\OneDrive\\Dokumente\\Online Kurse\\Data Science Spezialisierung John Hopkins\\Reproducible Research\\RepData_PeerAssessment1"
unzip(zipF,exdir=outDir)  # unzip your file
data <- read.csv("activity.zip")
View(data)
View(data)
data <- read.csv("activity.csv")
View(data)
View(data)
dat <- read.csv("activity.csv")
View(data)
View(data)
dat <- read.csv("activity.csv")
View(dat)
View(dat)
MeanPerDay <- tapply(dat, data, mean)
dat <- read.csv("activity.csv")
MeanPerDay <- sum(dat$steps, na.rm = TRUE)/unique(dat$date)
MeanPerDay
MeanPerDay <- sum(dat$steps, na.rm = TRUE)/count(unique(dat$date))
UniqueDate <- unique(dat$date)
UniqueDate
length(UniqueDate)
MeanPerDay <- sum(dat$steps, na.rm = TRUE)/length(UniqueDate)
MeanPerDay
table(dat)
SumOfEachDay <- tapply(dat, dat$date, sum)
SumOfEachDay <- tapply(dat$steps, dat$date, sum)
SumOfEachDay
SumOfEachDay <- tapply(dat$steps, dat$date, sum, na.rm = TRUE)
sumofeachday
SumOfEachDay
MeanPerDay <- mean(SumOfEachDay)
MeanPerDay
MeanPerDay <- apply(SumOfEachDay, mean)
MeanPerDay <- apply(SumOfEachDay, FUN = mean)
MeanPerDay <- apply(SumOfEachDay, FUN = mean, MARGIN = 1)
MeanPerDay
MeanTotalSteps <- mean(SumOfEachDay)
MedianTotalSteps <- median(SumOfEachDay)
dat <- read.csv("activity.csv")
## What is mean total number of steps taken per day?
NumOfDays <- length(unique(dat$date))
SumOfEachDay <- tapply(dat$steps, dat$date, sum, na.rm = TRUE)
MeanTotalSteps <- mean(SumOfEachDay)
MedianTotalSteps <- median(SumOfEachDay)
MedianTotalSteps
MeanTotalSteps
hist(x = SumOfEachday)
hist(x = SumOfEachDay)
hist(y = SumOfEachDay, x = dat$date)
IntMean <- tapply(dat$steps, dat$interval, mean, na.rm = TRUE)
IntMean
plot(x = IntMean, y = dat$steps, method = "l")
plot(method = "l", dat$interval, dat$steps)
plot(IntMean, method = "l")
plot(IntMean, type = "l")
plot(IntMean, type = "l", xlab = "5-Minute-Interval", ylab = "Mean Steps taken per day", main = "Mean steps taken per day in each interval")
which(IntMean, max)
which.max(IntMean)
which.max(IntMean)[1]
IntMean
MaxStepsInt <- which.max(IntMean)
sum(is.na(dat))
LogicalNA <- is.na(dat)
NumOfNA <- sum(LogicalNA)
dat1 <- dat[!LogicalNA, ]
View(dat1)
View(dat1)
is.na(dat1)
LogicalNA <- is.na(dat1)
NumOfNA <- sum(LogicalNA)
sum(LogicalNA)
LogicalNA <- is.na(dat)
NumOfNA <- sum(LogicalNA)
sum(LogicalNA)
dat[is.na(dat), ]
install.packages("imputation")
install.packages("DMwR")
library(DMwR)
complete.cases(dat)
datImp <- knnImputation(dat, k = 10)
sum(is.na(datImp))
View(dat1)
View(dat1)
View(datImp)
View(datImp)
ImpSumOfEachDay <- tapply(datImp$steps, datImp$date, sum)
ImpMeanTotalSteps <- mean(ImpSumOfEachDay)
ImpMedianTotalSteps <- median(ImpSumOfEachDay)
hist(x = ImpSumOfEachDay)
cbind(datImp, weekdays(datImp$date))
cbind(datImp, weekdays(as.factor(datImp$date)))
cbind(datImp, weekdays(as.date(datImp$date)))
cbind(datImp, weekdays(as.Date(datImp$date)))
View(dat1)
View(dat1)
View(datImp)
View(datImp)
datImp2 <- cbind(datImp, weekdays(as.Date(datImp$date)))
View(datImp2)
View(datImp2)
names(datImp2) <- c("steps", "date", "interval", "weekday")
for (i in length(datImp2)){
if (datImp2$weekday[i,] == "Saturday" | "Sunday"){
datWK[i, ] <- datImp2[i,]
} else{
datWD[i,] <- datImp2[i,]
}
}
for (i in length(datImp2)){
if (datImp2$weekday[i] == "Saturday" | "Sunday"){
datWK[i, ] <- datImp2[i,]
} else{
datWD[i,] <- datImp2[i,]
}
}
for (i in length(datImp2)){
if (datImp2$weekday[i] == "Samstag" | "Sonntag"){
datWK[i, ] <- datImp2[i,]
} else{
datWD[i,] <- datImp2[i,]
}
}
datImp2$weekday <- as.factor(datImp2$weekday)
for (i in length(datImp2)){
if (datImp2$weekday[i] == "Samstag" | "Sonntag"){
datWK[i, ] <- datImp2[i,]
} else{
datWD[i,] <- datImp2[i,]
}
}
for (i in length(datImp2)){
if (datImp2$weekday[i] == "Samstag" | datImp2$weekday[i] == "Sonntag"){
datWE[i, ] <- datImp2[i,]
} else{
datWD[i,] <- datImp2[i,]
}
}
datWE = as.numeric()
datWD = as.numeric()
datImp2$weekday <- as.factor(datImp2$weekday)
for (i in length(datImp2)){
if (datImp2$weekday[i] == "Samstag" | datImp2$weekday[i] == "Sonntag"){
datWE[i, ] <- datImp2[i,]
} else{
datWD[i,] <- datImp2[i,]
}
}
datImp2[grepl(pattern = "Montag|Dienstag|Mittwoch|Donnerstag|Freitag", x = "weekday"), "weekday or weekend"] <- "weekday"
datImp2[grepl(pattern = "Samstag|Sonntag", x = `weekday`), "weekday or weekend"] <- "weekend"
datImp2[, `weekday or weekend` := as.factor(`weekday or weekend`)]
library(data.table)
datImp2[grepl(pattern = "Montag|Dienstag|Mittwoch|Donnerstag|Freitag", x = "weekday"), "weekday or weekend"] <- "weekday"
datImp2[grepl(pattern = "Samstag|Sonntag", x = `weekday`), "weekday or weekend"] <- "weekend"
datImp2[, `weekday or weekend` := as.factor(`weekday or weekend`)]
datImp2 <- data.table(datImp2)
datImp2[grepl(pattern = "Montag|Dienstag|Mittwoch|Donnerstag|Freitag", x = "weekday"), "weekday or weekend"] <- "weekday"
datImp2[grepl(pattern = "Samstag|Sonntag", x = `weekday`), "weekday or weekend"] <- "weekend"
datImp2[, `weekday or weekend` := as.factor(`weekday or weekend`)]
datImp2[grepl(pattern = "Montag|Dienstag|Mittwoch|Donnerstag|Freitag", x = "weekday"), "weekday or weekend"] <- "weekday"
datImp2[grepl(pattern = "Samstag|Sonntag", x = `weekday`), "weekday or weekend"] <- "weekend"
View(datImp2)
View(datImp2)
datImp2[grepl(pattern = "Samstag|Sonntag", x = `weekday`), "weekday or weekend"] <- "weekend"
datImp2[grepl(pattern = "Montag|Dienstag|Mittwoch|Donnerstag|Freitag", x = "weekday"), "weekday or weekend"] <- "weekday"
datImp2[grepl(pattern = "Montag|Dienstag|Mittwoch|Donnerstag|Freitag", x = `weekday`), "weekday or weekend"] <- "weekday"
datImp2[, `weekday or weekend` := as.factor(`weekday or weekend`)]
library(ggplot2)
library(data.table)
library(DMwR)
ggplot(datImp2 , aes(x = interval , y = steps, color=`weekday or weekend`)) + geom_line() + labs(title = "Mean Steps by Weekday/-end", x = "Interval", y = "Number of Steps") + facet_wrap(~`weekday or weekend` , ncol = 1, nrow=2)
IntMean[steps == max(steps)
]
IntMean[IntMean$steps == max(Intmean$steps),]
MaxStepsInt <- which.max(IntMean)
MaxStepsInt
dat <- data.table(read.csv("activity.csv"))
## What is mean total number of steps taken per day?
NumOfDays <- length(unique(dat$date))
SumOfEachDay <- tapply(dat$steps, dat$date, sum, na.rm = TRUE)
MeanTotalSteps <- mean(SumOfEachDay)
MedianTotalSteps <- median(SumOfEachDay)
hist(x = SumOfEachDay)
## What is the average daily activity pattern?
IntMean <- tapply(dat$steps, dat$interval, mean, na.rm = TRUE)
plot(IntMean, type = "l", xlab = "5-Minute-Interval", ylab = "Mean Steps taken per day", main = "Mean steps taken per day in each interval")
MaxStepsInt <- which.max(IntMean)
MaxStepsInt
## Imputing missing values
LogicalNA <- is.na(dat)
NumOfNA <- sum(LogicalNA)
library(DMwR)
complete.cases(dat)
datImp <- knnImputation(dat, k = 10)
ImpSumOfEachDay <- tapply(datImp$steps, datImp$date, sum)
ImpMeanTotalSteps <- mean(ImpSumOfEachDay)
ImpMedianTotalSteps <- median(ImpSumOfEachDay)
hist(x = ImpSumOfEachDay)
## Are there differences in activity patterns between weekdays and weekends?
datImp2 <- cbind(datImp, weekdays(as.Date(datImp$date)))
names(datImp2) <- c("steps", "date", "interval", "weekday")
datImp2 <- data.table(datImp2)
datImp2[grepl(pattern = "Montag|Dienstag|Mittwoch|Donnerstag|Freitag", x = `weekday`), "weekday or weekend"] <- "weekday"
datImp2[grepl(pattern = "Samstag|Sonntag", x = `weekday`), "weekday or weekend"] <- "weekend"
datImp2[, `weekday or weekend` := as.factor(`weekday or weekend`)]
ggplot(datImp2 , aes(x = interval , y = steps, color=`weekday or weekend`)) + geom_line() + labs(title = "Mean Steps by Weekday/-end", x = "Interval", y = "Number of Steps") + facet_wrap(~`weekday or weekend` , ncol = 1, nrow=2)
MaxStepsInt[steps == max(steps), .(max_interval) = interval]
MaxStepsInt[steps == max(steps), .(max_interval) = interval)]
MaxStepsInt[steps == max(steps), .(max_interval = interval)]
IntMean[steps == max(steps), .(max_interval = interval)]
which.max(IntMean)
MeanTotalSteps
MedianTotalSteps
hist(x = SumOfEachDay)
hist(x = SumOfEachDay)
plot(IntMean, type = "l", xlab = "5-Minute-Interval", ylab = "Mean Steps taken per day", main = "Mean steps taken per day in each interval")
datImp3 <- dat[, c(lapply(.SD, mean, na.rm = TRUE)), .SDcols = c("steps"), by = .(interval)]
MaxStepsInt <- datImp3[steps == max(steps), .(max_interval = interval)]
MaxStepsInt
MaxStepsInt <- which.max(IntMean)
MaxStepsInt
setwd("~/Online Kurse/Data Science Spezialisierung John Hopkins/Reproducible Research/RepData_PeerAssessment1")
